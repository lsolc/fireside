
loader.register('app/templates', function(require) {
Em.TEMPLATES['application'] = Ember.Handlebars.compile("<section class=\"navigation\">\n  {{outlet nav}}\n</section>\n\n<section class=\"sidebar\">\n    {{outlet sidebar}}\n</section>\n\n<section class=\"content\">\n  {{outlet content}}\n</section>\n\n\n\n\n");

Em.TEMPLATES['event-form'] = Ember.Handlebars.compile("<section class=\"container\">\t\n\t<form id=\"new_event\" action=\"new_submit\" method=\"get\" accept-charset=\"utf-8\">\n\t\t<h3>New Event</h3>\n\t\t\n\t\t<section class=\"time\">\t\t\t\n\t\t\t<section class=\"from\">\n\t\t\t\t<span>From:</span>\n\t\t\t\t<select id=\"hours\">{{{show_hours model.from_hours}}}</select>\n\t\t\t\t<span>:</span>\n\t\t\t\t<select id=\"minutes\">{{{show_minutes model.from_minutes}}}</select>\n\t\t\t\t<span id=\"date\">{{model.from_date}}</span>\n\t\t\t</section>\n\t\t\t\n\t\t\t<section class=\"duration\">\n\t\t\t\t<span>Duration:</span>\n\t\t\t\t<div class=\"layout-slider\">\n\t\t\t\t\t<input id=\"SliderSingle\" type=\"slider\" name=\"duration_hours\" value=\"{{model.duration_hours}}\t\" />\n\t\t\t\t</div>   \n\t\t\t</section>\n\t\t\t\n\t\t\t<section class=\"till\">\n\t\t\t\t<span>To:</span>\n\t\t\t\t<span id=\"date_till\"></span>\n\t\t\t</section>\t\t    \t\t\n\t\t</section>\t\n\t\t\n\t\t<input type=\"text\"   name=\"\" value=\"{{model.title}}\" id=\"title\" placeholder=\"Title:\">\n\t\t<textarea name=\"Name\" rows=\"8\" cols=\"40\" maxlength=\"250\" id=\"description\" placeholder=\"Description:\">{{model.description}}</textarea>\t\t\n\n\t\t<section class=\"members\">\n\t\t\t<select id=\"members\" data-placeholder=\"Choose a member...\" multiple=\"multiple\">\n\t\t\t\t{{#each all_members}}\n\t\t\t\t<option {{should_be_selected this ../model.members}} value=\"{{this.id}}\">{{this.display_name}}</option>\t\n\t\t\t\t{{/each}}\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t</select>\n\t\t</section>\t\n\t\t\n\t\t<ul id=\"errors\"></ul>\n\t\t\n\t\t<section class=\"controls\">\n\t\t\t<input type=\"button\" value=\"Create\" class=\"create_button\">\t\t\t\n\t\t\t<a href=\"#/\">Cancel</a>\n\t\t</section>\t\n\t\n\t</form>\n</section>");

Em.TEMPLATES['event-listItem'] = Ember.Handlebars.compile("<section class=\"event_item full\" data-next-state=\"partial\" data-id=\"{{id}}\">\n\t<header>\n\t\t<section class=\"top_panel \">\n\t\t\t<span class=\"time_panel \">\n\t\t\t\t<span class=\"time\">Mon, June 11, 14:00</span>\n\t\t\t\t<span class=\"duration\">5 hours</span>\n\t\t\t</span>\t\n\t\t\t<section class=\"action_panel\">\n\t\t\t\t<a href=\"#/events/{{id}}\"><img src=\"/images/icons/edit.png\" alt=\"Edit\"></a>\n\t\t\t\t<img src=\"/images/icons/delete.png\" alt=\"Delete\" />\n\t\t\t</section>\t\t\n\t\t</section>\n\t\t<section class=\"title\">\t\t\n\t\t\t{{title}}\n\t\t</section>\n\t</header>\n\t<section class=\"details_panel\">\t\n\t\t<img src=\"/images/lida.png\" alt=\"person photo\" />\n\t\t<img src=\"/images/pepa.png\" alt=\"person photo\" />\n\t\t{{description}}\n\t</section>\t\n</section>  \n\n");

Em.TEMPLATES['events'] = Ember.Handlebars.compile("\n\n<section class=\"day_picker\">day_picker</section>\n<section class=\"events\">\n  <section class=\"detail_form\"></section>\n  <section class=\"events-now\">\n    <section class=\"past_events\">past_events\n      <p>The specification describes a CSS box model optimized for user interface design. In the flexbox...  </p>\n    </section>\n    <section class=\"current_day\">\n      <section class=\"panel\">\n        <span class=\"current_date\">2012-04-10</span>\n        <a href=\"#/events/new\">New Event</a>\n      </section>\n      <div class=\"current\">\n        {{view App.EventView}}\n      </div>\n    </section>\n  </section>\n\n  <section class=\"events-coming\">\n    <section class=\"next_day\">\n      <section class=\"panel\">\n        <span class=\"next_date\">2012-04-10</span>\n        <a href=\"#/events/new\">New Event</a>\n        <div class=\"next\">\n\n        </div>\n      </section>\n\n      next_day\n\n      <p>The specification describes a CSS box model optimized for user interface design. In the flexbox layout model, the children of a flexbox can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions. </p>\n\n    </section>\n    <section class=\"future\">future\n\n      <p>The specification describes a CSS box model optimized for user interface design. In the flexbox layout model, the children of a flexbox can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions. </p>\n      <p>The specification describes a CSS box model optimized for user interface design. In the flexbox layout model, the children of a flexbox can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions. </p>\n\n\n      <p>The specification describes a CSS box model optimized for user interface design. In the flexbox layout model, the children of a flexbox can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions. </p>\n      <p>The specification describes a CSS box model optimized for user interface design. In the flexbox layout model, the children of a flexbox can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions. </p>\n      <p>The specification describes a CSS box model optimized for user interface design. In the flexbox layout model, the children of a flexbox can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions. </p><p>The specification describes a CSS box model optimized for user interface design. In the flexbox layout model, the children of a flexbox can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions. </p>\n\n    </section>\n  </section>\n</section>\n\n\n\n");

Em.TEMPLATES['member-form'] = Ember.Handlebars.compile("\n\t<form id=\"member_form\" action=\"\" method=\"\" accept-charset=\"utf-8\">\n\t\t<h3>Add Member</h3>\n\t\t<input type=\"text\"   name=\"household\" value=\"\" id=\"household\" placeholder=\"Household:\">\n\t\t<input type=\"text\"   name=\"name\" value=\"{{model.display_name}}\" id=\"name\" placeholder=\"Name:\">\n\t\t\n\t\t<ul id=\"errors\"></ul>\n\t\t<section class=\"controls\">\n\t\t\t<input type=\"button\" value=\"Create\" class=\"create_button\">\t\t\t\n\t\t\t<a href=\"#/\">Cancel</a>\n\t\t</section>\t\n\t</form>\n");

Em.TEMPLATES['member-listItem'] = Ember.Handlebars.compile("<div class=\"wrapper\">\n    <button type=\"button\"><img {{bindAttr src=\"image_url\"}} /></button>\n</div>\n");


});

Em.TEMPLATES['events'] = Ember.Handlebars.compile("\n\n<section class=\"day_picker\">day_picker</section>\n<section class=\"events\">\n  <section class=\"detail_form\"></section>\n  <section class=\"events-now\">\n    <section class=\"past_events\">past_events\n      <p>The specification describes a CSS box model optimized for user interface design. In the flexbox...  </p>\n    </section>\n    <section class=\"current_day\">\n      <section class=\"panel\">\n        <span class=\"current_date\">2012-04-10</span>\n        <a href=\"#/events/new\">New Event</a>\n      </section>\n      <div class=\"current\">\n        {{view App.EventView}}\n      </div>\n    </section>\n  </section>\n\n  <section class=\"events-coming\">\n    <section class=\"next_day\">\n      <section class=\"panel\">\n        <span class=\"next_date\">2012-04-10</span>\n        <a href=\"#/events/new\">New Event</a>\n        <div class=\"next\">\n\n        </div>\n      </section>\n\n      next_day\n\n      <p>The specification describes a CSS box model optimized for user interface design. In the flexbox layout model, the children of a flexbox can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions. </p>\n\n    </section>\n    <section class=\"future\">future\n\n      <p>The specification describes a CSS box model optimized for user interface design. In the flexbox layout model, the children of a flexbox can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions. </p>\n      <p>The specification describes a CSS box model optimized for user interface design. In the flexbox layout model, the children of a flexbox can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions. </p>\n\n\n      <p>The specification describes a CSS box model optimized for user interface design. In the flexbox layout model, the children of a flexbox can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions. </p>\n      <p>The specification describes a CSS box model optimized for user interface design. In the flexbox layout model, the children of a flexbox can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions. </p>\n      <p>The specification describes a CSS box model optimized for user interface design. In the flexbox layout model, the children of a flexbox can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions. </p><p>The specification describes a CSS box model optimized for user interface design. In the flexbox layout model, the children of a flexbox can be laid out in any direction, and can \"flex\" their sizes, either growing to fill unused space or shrinking to avoid overflowing the parent. Both horizontal and vertical alignment of the children can be easily manipulated. Nesting of these boxes (horizontal inside vertical, or vertical inside horizontal) can be used to build layouts in two dimensions. </p>\n\n    </section>\n  </section>\n</section>\n\n\n\n");

